declare const _default: {
    readonly ApplicationData: {
        readonly type: "object";
        readonly properties: {
            readonly id: {
                readonly description: "The ID for the application.";
                readonly type: "string";
            };
            readonly name: {
                readonly description: "Name of the application";
                readonly minLength: 1;
                readonly type: "string";
            };
            readonly iconURL: {
                readonly description: "URL for the application icon. It should be a square image of 256x256. This\nwill be used as the avatar for messages and emails coming from your\napplication.  If not specified, the Cord logo will be used.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["id", "name", "iconURL"];
        readonly required: readonly ["iconURL", "id", "name"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly CreateApplicationVariables: {
        readonly description: "https://docs.cord.com/reference/rest-api/applications/";
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly description: "Name of the application";
                readonly minLength: 1;
                readonly type: "string";
            };
            readonly iconURL: {
                readonly description: "URL for the application icon. It should be a square image of 256x256. This\nwill be used as the avatar for messages and emails coming from your\napplication.  If not specified, the Cord logo will be used.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["name", "iconURL"];
        readonly required: readonly ["name"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly UpdateApplicationVariables: {
        readonly description: "https://docs.cord.com/reference/rest-api/applications/";
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly description: "Name of the application";
                readonly minLength: 1;
                readonly type: "string";
            };
            readonly iconURL: {
                readonly description: "URL for the application icon. It should be a square image of 256x256. This\nwill be used as the avatar for messages and emails coming from your\napplication.  If not specified, the Cord logo will be used.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["name", "iconURL"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly DeleteApplicationVariables: {
        readonly type: "object";
        readonly properties: {
            readonly secret: {
                readonly description: "Secret key of the application that you want to delete. This can be found\nwithin the Cord Console.";
                readonly minLength: 1;
                readonly type: "string";
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["secret"];
        readonly required: readonly ["secret"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly PlatformOrganizationVariables: {
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly description: "Organization name";
                readonly type: "string";
            };
            readonly status: {
                readonly enum: readonly ["active", "deleted"];
                readonly type: "string";
            };
            readonly members: {
                readonly description: "List of partner-specific IDs of the users who are members of this organization";
                readonly type: "array";
                readonly items: {
                    readonly type: readonly ["string", "number"];
                };
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["name", "status", "members"];
        readonly required: readonly ["name"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly UpdatePlatformOrganizationVariables: {
        readonly description: "https://docs.cord.com/reference/rest-api/organizations/";
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly description: "Organization name";
                readonly type: "string";
            };
            readonly status: {
                readonly enum: readonly ["active", "deleted"];
                readonly type: "string";
            };
            readonly members: {
                readonly description: "List of partner-specific IDs of the users who are members of this organization";
                readonly type: "array";
                readonly items: {
                    readonly type: readonly ["string", "number"];
                };
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["name", "status", "members"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly UpdatePlatformOrganizationMembersVariables: {
        readonly description: "https://docs.cord.com/reference/rest-api/organizations/";
        readonly type: "object";
        readonly properties: {
            readonly add: {
                readonly type: "array";
                readonly items: {
                    readonly type: readonly ["string", "number"];
                };
            };
            readonly remove: {
                readonly type: "array";
                readonly items: {
                    readonly type: readonly ["string", "number"];
                };
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["add", "remove"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly CreatePlatformOrganizationVariables: {
        readonly additionalProperties: false;
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly description: "Organization name";
                readonly type: "string";
            };
            readonly status: {
                readonly enum: readonly ["active", "deleted"];
                readonly type: "string";
            };
            readonly members: {
                readonly description: "List of partner-specific IDs of the users who are members of this organization";
                readonly type: "array";
                readonly items: {
                    readonly type: readonly ["string", "number"];
                };
            };
            readonly id: {
                readonly $ref: "#/definitions/ID";
            };
        };
        readonly required: readonly ["id", "name"];
        readonly definitions: {
            readonly ID: {
                readonly minLength: 1;
                readonly maxLength: 128;
                readonly type: readonly ["string", "number"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly PlatformUserVariables: {
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly description: "Email address";
                readonly format: "email";
                readonly type: "string";
            };
            readonly name: {
                readonly description: "Full user name";
                readonly type: "string";
            };
            readonly shortName: {
                readonly description: "Short user name. In most cases, this will be preferred over name when set.";
                readonly type: "string";
            };
            readonly short_name: {
                readonly type: "string";
            };
            readonly status: {
                readonly enum: readonly ["active", "deleted"];
                readonly type: "string";
            };
            readonly profilePictureURL: {
                readonly description: "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly profile_picture_url: {
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly first_name: {
                readonly description: "User's first name. This field is deprecated and has no effect.";
                readonly type: "string";
            };
            readonly last_name: {
                readonly description: "User's last name. This field is deprecated and has no effect.";
                readonly type: "string";
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["email", "name", "shortName", "short_name", "status", "profilePictureURL", "profile_picture_url", "first_name", "last_name", "metadata"];
        readonly required: readonly ["email"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly UpdatePlatformUserVariables: {
        readonly description: "https://docs.cord.com/reference/rest-api/users/";
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly description: "Email address";
                readonly format: "email";
                readonly type: "string";
            };
            readonly name: {
                readonly description: "Full user name";
                readonly type: "string";
            };
            readonly shortName: {
                readonly description: "Short user name. In most cases, this will be preferred over name when set.";
                readonly type: "string";
            };
            readonly short_name: {
                readonly type: "string";
            };
            readonly status: {
                readonly enum: readonly ["active", "deleted"];
                readonly type: "string";
            };
            readonly profilePictureURL: {
                readonly description: "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly profile_picture_url: {
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly first_name: {
                readonly description: "User's first name. This field is deprecated and has no effect.";
                readonly type: "string";
            };
            readonly last_name: {
                readonly description: "User's last name. This field is deprecated and has no effect.";
                readonly type: "string";
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["email", "name", "shortName", "short_name", "status", "profilePictureURL", "profile_picture_url", "first_name", "last_name", "metadata"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly CreatePlatformUserVariables: {
        readonly additionalProperties: false;
        readonly type: "object";
        readonly properties: {
            readonly email: {
                readonly description: "Email address";
                readonly format: "email";
                readonly type: "string";
            };
            readonly name: {
                readonly description: "Full user name";
                readonly type: "string";
            };
            readonly shortName: {
                readonly description: "Short user name. In most cases, this will be preferred over name when set.";
                readonly type: "string";
            };
            readonly short_name: {
                readonly type: "string";
            };
            readonly status: {
                readonly enum: readonly ["active", "deleted"];
                readonly type: "string";
            };
            readonly profilePictureURL: {
                readonly description: "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly profile_picture_url: {
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly first_name: {
                readonly description: "User's first name. This field is deprecated and has no effect.";
                readonly type: "string";
            };
            readonly last_name: {
                readonly description: "User's last name. This field is deprecated and has no effect.";
                readonly type: "string";
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly id: {
                readonly $ref: "#/definitions/ID";
            };
        };
        readonly required: readonly ["email", "id"];
        readonly definitions: {
            readonly ID: {
                readonly minLength: 1;
                readonly maxLength: 128;
                readonly type: readonly ["string", "number"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly ListUserQueryParameters: {
        readonly type: "object";
        readonly properties: {
            readonly filter: {
                readonly description: "This is a JSON object with one optional entry.  Users will be matched\nagainst the filter specified. This is a partial match, which means any keys\nother than the ones you specify are ignored when checking for a match.\nPlease note that because this is a query parameter in a REST API, this JSON\nobject must be URI encoded before being sent.";
                readonly $ref: "#/definitions/Pick<FilterParameters,\"metadata\">";
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["filter"];
        readonly definitions: {
            readonly 'Pick<FilterParameters,"metadata">': {
                readonly type: "object";
                readonly properties: {
                    readonly metadata: {
                        readonly description: "Arbitrary key-value pairs of data associated with the object.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                };
                readonly additionalProperties: false;
                readonly propertyOrder: readonly ["metadata"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly BatchAPIVariables: {
        readonly description: "https://docs.cord.com/reference/rest-api/batch/";
        readonly type: "object";
        readonly properties: {
            readonly users: {
                readonly description: "List of user objects. Every object must include the id field. If the user\nalready exists, all other fields are optional and only updated when\npresent. If the user does not already exist, fields are required as\ndescribed in the [Create or update a\nuser](/reference/rest-api/organizations/#create-or-update-an-organization)\nAPI.";
                readonly maxItems: 10000;
                readonly type: "array";
                readonly items: {
                    readonly additionalProperties: false;
                    readonly type: "object";
                    readonly properties: {
                        readonly email: {
                            readonly description: "Email address";
                            readonly format: "email";
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly description: "Full user name";
                            readonly type: "string";
                        };
                        readonly shortName: {
                            readonly description: "Short user name. In most cases, this will be preferred over name when set.";
                            readonly type: "string";
                        };
                        readonly short_name: {
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly enum: readonly ["active", "deleted"];
                            readonly type: "string";
                        };
                        readonly profilePictureURL: {
                            readonly description: "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.";
                            readonly format: "uri";
                            readonly type: readonly ["null", "string"];
                        };
                        readonly profile_picture_url: {
                            readonly format: "uri";
                            readonly type: readonly ["null", "string"];
                        };
                        readonly first_name: {
                            readonly description: "User's first name. This field is deprecated and has no effect.";
                            readonly type: "string";
                        };
                        readonly last_name: {
                            readonly description: "User's last name. This field is deprecated and has no effect.";
                            readonly type: "string";
                        };
                        readonly metadata: {
                            readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: readonly ["string", "number", "boolean"];
                            };
                            readonly propertyOrder: readonly [];
                        };
                        readonly id: {
                            readonly $ref: "#/definitions/ID";
                        };
                    };
                    readonly required: readonly ["id"];
                };
            };
            readonly organizations: {
                readonly description: "List of organization objects. Every object must include the id field. If\nthe organization already exists, all other fields are optional and only\nupdated when present. If the organization does not already exist, fields\nare required as described in the [Create or update an\norganization](/reference/rest-api/organizations/#create-or-update-an-organization)\nAPI.";
                readonly maxItems: 1000;
                readonly type: "array";
                readonly items: {
                    readonly additionalProperties: false;
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly description: "Organization name";
                            readonly type: "string";
                        };
                        readonly status: {
                            readonly enum: readonly ["active", "deleted"];
                            readonly type: "string";
                        };
                        readonly members: {
                            readonly description: "List of partner-specific IDs of the users who are members of this organization";
                            readonly type: "array";
                            readonly items: {
                                readonly type: readonly ["string", "number"];
                            };
                        };
                        readonly id: {
                            readonly $ref: "#/definitions/ID";
                        };
                    };
                    readonly required: readonly ["id"];
                };
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["users", "organizations"];
        readonly definitions: {
            readonly ID: {
                readonly minLength: 1;
                readonly maxLength: 128;
                readonly type: readonly ["string", "number"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly ThreadData: {
        readonly type: "object";
        readonly properties: {
            readonly id: {
                readonly description: "The ID for this thread.";
                readonly type: "string";
            };
            readonly organizationID: {
                readonly description: "The organization ID this thread is in.";
                readonly type: "string";
            };
            readonly total: {
                readonly description: "The total number of messages in this thread.";
                readonly type: "number";
            };
            readonly resolved: {
                readonly description: "Whether this thread is resolved. In a GET request, this is equivalent to\n`!!resolvedTimestamp`. In a PUT request, setting this to `true` is\nequivalent to setting `resolvedTimestamp` to the current time, and setting\nthis to `false` is equivalent to setting `resolvedTimestamp` to `null`.";
                readonly type: "boolean";
            };
            readonly resolvedTimestamp: {
                readonly description: "The timestamp when this thread was resolved. Set to `null` if this thread\nis not resolved.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly participants: {
                readonly description: "All of the users who are subscribed to this thread.";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly lastSeenTimestamp: {
                            readonly description: "The timestamp of the most recent message or reaction that this user has\nseen in this thread. Is `null` if this participant has never viewed this\nthread.";
                            readonly anyOf: readonly [{
                                readonly type: "string";
                                readonly format: "date-time";
                            }, {
                                readonly type: "null";
                            }];
                        };
                        readonly userID: {
                            readonly description: "The user ID of the participant. Can be null if the current viewer no longer\nshares an [organization](/reference/rest-api/organizations) with this\nparticipant (and therefore can no longer access that participant's\ninformation).";
                            readonly type: readonly ["null", "string"];
                        };
                    };
                    readonly additionalProperties: false;
                    readonly propertyOrder: readonly ["lastSeenTimestamp", "userID"];
                    readonly required: readonly ["lastSeenTimestamp", "userID"];
                };
            };
            readonly typing: {
                readonly description: "The users that are currently typing in this thread.  Typing status is\ntransient in nature, so the value is the set of users typing at a\nparticular instant, but may change rapidly.";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly name: {
                readonly description: "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.";
                readonly type: "string";
            };
            readonly url: {
                readonly description: "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.";
                readonly type: "string";
            };
            readonly location: {
                readonly description: "The [location](/reference/location) of this thread.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["id", "organizationID", "total", "resolved", "resolvedTimestamp", "participants", "typing", "name", "url", "location", "metadata"];
        readonly required: readonly ["id", "location", "metadata", "name", "organizationID", "participants", "resolved", "resolvedTimestamp", "total", "typing", "url"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly ThreadParticipant: {
        readonly type: "object";
        readonly properties: {
            readonly lastSeenTimestamp: {
                readonly description: "The timestamp of the most recent message or reaction that this user has\nseen in this thread. Is `null` if this participant has never viewed this\nthread.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly userID: {
                readonly description: "The user ID of the participant. Can be null if the current viewer no longer\nshares an [organization](/reference/rest-api/organizations) with this\nparticipant (and therefore can no longer access that participant's\ninformation).";
                readonly type: readonly ["null", "string"];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["lastSeenTimestamp", "userID"];
        readonly required: readonly ["lastSeenTimestamp", "userID"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly UpdateThreadVariables: {
        readonly description: "https://docs.cord.com/reference/rest-api/threads/";
        readonly type: "object";
        readonly properties: {
            readonly location: {
                readonly description: "The [location](/reference/location) of this thread.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly id: {
                readonly description: "The ID for this thread.";
                readonly type: "string";
            };
            readonly url: {
                readonly description: "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.";
                readonly type: "string";
            };
            readonly name: {
                readonly description: "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.";
                readonly type: "string";
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly resolvedTimestamp: {
                readonly description: "The timestamp when this thread was resolved. Set to `null` if this thread\nis not resolved.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly organizationID: {
                readonly description: "The organization ID this thread is in.";
                readonly type: "string";
            };
            readonly resolved: {
                readonly description: "Whether this thread is resolved. In a GET request, this is equivalent to\n`!!resolvedTimestamp`. In a PUT request, setting this to `true` is\nequivalent to setting `resolvedTimestamp` to the current time, and setting\nthis to `false` is equivalent to setting `resolvedTimestamp` to `null`.";
                readonly type: "boolean";
            };
            readonly userID: {
                readonly description: "Certain changes to the thread may post a message into the thread -- in\nparticular, resolving or unresolving a thread posts a message into the\nthread saying \"User un/resolved this thread\". This parameter is the ID of\nthe User who will be listed as the author of that message. It's optional\n-- if no user is specified, then those messages won't get posted.";
                readonly type: "string";
            };
            readonly typing: {
                readonly description: "Marks the specified users as typing in this thread.  The typing indicator\nexpires after 3 seconds, so to continually show the indicator it needs to\nbe called on an interval.  Pass an empty array to clear all users' typing indicators.";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["location", "id", "url", "name", "metadata", "resolvedTimestamp", "organizationID", "resolved", "userID", "typing"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly CreateThreadVariables: {
        readonly type: "object";
        readonly properties: {
            readonly location: {
                readonly description: "The [location](/reference/location) of this thread.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly id: {
                readonly description: "The ID for this thread.";
                readonly type: "string";
            };
            readonly url: {
                readonly description: "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.";
                readonly type: "string";
            };
            readonly name: {
                readonly description: "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.";
                readonly type: "string";
            };
            readonly organizationID: {
                readonly description: "The organization ID this thread is in.";
                readonly type: "string";
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly typing: {
                readonly description: "The users that are currently typing in this thread.  Typing status is\ntransient in nature, so the value is the set of users typing at a\nparticular instant, but may change rapidly.";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["location", "id", "url", "name", "organizationID", "metadata", "typing"];
        readonly required: readonly ["id", "location", "name", "organizationID", "url"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly ListThreadQueryParameters: {
        readonly type: "object";
        readonly properties: {
            readonly filter: {
                readonly description: "This is a JSON object with two optional entries.\nYou may specify both or either. Threads will be matched against the filters specified.\nThis is a partial match, which means any keys other than the ones you specify are ignored\nwhen checking for a match. Please note that because this is a query parameter in a REST API,\nthis JSON object must be URI encoded before being sent.";
                readonly type: "object";
                readonly properties: {
                    readonly location: {
                        readonly description: "The location for the thread.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                    readonly metadata: {
                        readonly description: "Arbitrary key-value pairs of data associated with the object.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                };
                readonly additionalProperties: false;
                readonly propertyOrder: readonly ["location", "metadata"];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["filter"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly MessageVariables: {
        readonly type: "object";
        readonly properties: {
            readonly id: {
                readonly description: "The ID for the message.";
                readonly type: "string";
            };
            readonly authorID: {
                readonly description: "The ID for the user that sent the message.";
                readonly type: "string";
            };
            readonly organizationID: {
                readonly description: "The ID for the organization this message belongs to.";
                readonly type: "string";
            };
            readonly threadID: {
                readonly description: "The ID for the thread this message is part of.";
                readonly type: "string";
            };
            readonly content: {
                readonly description: "The content of the message.";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {};
                    readonly additionalProperties: true;
                };
            };
            readonly url: {
                readonly description: "A URL where the message can be seen.  This determines where a user is sent\nwhen they click on a reference to this message, such as in a notification.\nIf unset, it defaults to the thread's URL.";
                readonly type: readonly ["null", "string"];
            };
            readonly createdTimestamp: {
                readonly description: "The timestamp when this message was created.  The default value is the\ncurrent time.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly deletedTimestamp: {
                readonly description: "The timestamp when this message was deleted, if it was.  If unset, the\nmessage is not deleted.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly updatedTimestamp: {
                readonly description: "The timestamp when this message was last edited, if it ever was.  If unset,\nthe message does not show as edited.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly iconURL: {
                readonly description: "The URL of the icon to show next to the message.  This is only used for\n`action_message` messages; other messages show the avatar of the author.\nIf an `action_message` does not have an icon set, no icon is shown.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly type: {
                readonly description: "The type of message this is.  A `user_message` is a message that the author\nsent.  An `action_message` is a message about something that happened, such\nas the thread being resolved.  The default value is `user_message`.";
                readonly enum: readonly ["action_message", "user_message"];
                readonly type: "string";
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["id", "authorID", "organizationID", "threadID", "content", "url", "createdTimestamp", "deletedTimestamp", "updatedTimestamp", "iconURL", "type", "metadata"];
        readonly required: readonly ["authorID", "content", "createdTimestamp", "deletedTimestamp", "iconURL", "id", "metadata", "organizationID", "threadID", "type", "updatedTimestamp", "url"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly CreateMessageVariables: {
        readonly type: "object";
        readonly properties: {
            readonly createThread: {
                readonly description: "The parameters for creating a thread if the supplied thread doesn't exist\nyet.  If the thread doesn't exist but `createThread` isn't provided, the\ncall will generate an error.  This value is ignored if the thread already\nexists.";
                readonly $ref: "#/definitions/Omit<CreateThreadVariables,\"id\">";
            };
            readonly id: {
                readonly description: "The ID for the message.";
                readonly type: "string";
            };
            readonly content: {
                readonly description: "The content of the message.";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {};
                    readonly additionalProperties: true;
                };
            };
            readonly authorID: {
                readonly description: "The ID for the user that sent the message.";
                readonly type: "string";
            };
            readonly type: {
                readonly description: "The type of message this is.  A `user_message` is a message that the author\nsent.  An `action_message` is a message about something that happened, such\nas the thread being resolved.  The default value is `user_message`.";
                readonly enum: readonly ["action_message", "user_message"];
                readonly type: "string";
            };
            readonly url: {
                readonly description: "A URL where the message can be seen.  This determines where a user is sent\nwhen they click on a reference to this message, such as in a notification.\nIf unset, it defaults to the thread's URL.";
                readonly type: readonly ["null", "string"];
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly iconURL: {
                readonly description: "The URL of the icon to show next to the message.  This is only used for\n`action_message` messages; other messages show the avatar of the author.\nIf an `action_message` does not have an icon set, no icon is shown.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly createdTimestamp: {
                readonly description: "The timestamp when this message was created.  The default value is the\ncurrent time.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly deletedTimestamp: {
                readonly description: "The timestamp when this message was deleted, if it was.  If unset, the\nmessage is not deleted.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly updatedTimestamp: {
                readonly description: "The timestamp when this message was last edited, if it ever was.  If unset,\nthe message does not show as edited.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["createThread", "id", "content", "authorID", "type", "url", "metadata", "iconURL", "createdTimestamp", "deletedTimestamp", "updatedTimestamp"];
        readonly required: readonly ["authorID", "content", "id"];
        readonly definitions: {
            readonly 'Omit<CreateThreadVariables,"id">': {
                readonly type: "object";
                readonly properties: {
                    readonly location: {
                        readonly description: "The [location](/reference/location) of this thread.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                    readonly url: {
                        readonly description: "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.";
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly description: "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.";
                        readonly type: "string";
                    };
                    readonly metadata: {
                        readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                    readonly organizationID: {
                        readonly description: "The organization ID this thread is in.";
                        readonly type: "string";
                    };
                    readonly typing: {
                        readonly description: "The users that are currently typing in this thread.  Typing status is\ntransient in nature, so the value is the set of users typing at a\nparticular instant, but may change rapidly.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
                readonly additionalProperties: false;
                readonly propertyOrder: readonly ["location", "url", "name", "metadata", "organizationID", "typing"];
                readonly required: readonly ["location", "name", "organizationID", "url"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly UpdateMessageVariables: {
        readonly type: "object";
        readonly properties: {
            readonly deleted: {
                readonly description: "Whether we want to mark this message as deleted. Setting this to `true` without\nproviding a value for `deletedTimestamp` is equivalent to setting `deletedTimestamp` to current\ntime and setting this to `false` is equivalent to setting `deletedTimestamp` to `null`.";
                readonly type: "boolean";
            };
            readonly deletedTimestamp: {
                readonly description: "The timestamp when this message was deleted, if it was. If set to null, the message is not deleted.\nDeleting a message this way will only soft delete it, replacing the content of the message with a\nrecord of the deletion on the frontend. If you'd like to permanently delete it instead, use the\n[delete message endpoint](/reference/rest-api/messages#Delete-a-message).";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly type: {
                readonly description: "The type of message this is.  A `user_message` is a message that the author\nsent.  An `action_message` is a message about something that happened, such\nas the thread being resolved.  The default value is `user_message`.";
                readonly enum: readonly ["action_message", "user_message"];
                readonly type: "string";
            };
            readonly id: {
                readonly description: "The ID for the message.";
                readonly type: "string";
            };
            readonly url: {
                readonly description: "A URL where the message can be seen.  This determines where a user is sent\nwhen they click on a reference to this message, such as in a notification.\nIf unset, it defaults to the thread's URL.";
                readonly type: readonly ["null", "string"];
            };
            readonly content: {
                readonly description: "The content of the message.";
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {};
                    readonly additionalProperties: true;
                };
            };
            readonly metadata: {
                readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly iconURL: {
                readonly description: "The URL of the icon to show next to the message.  This is only used for\n`action_message` messages; other messages show the avatar of the author.\nIf an `action_message` does not have an icon set, no icon is shown.";
                readonly format: "uri";
                readonly type: readonly ["null", "string"];
            };
            readonly authorID: {
                readonly description: "The ID for the user that sent the message.";
                readonly type: "string";
            };
            readonly createdTimestamp: {
                readonly description: "The timestamp when this message was created.  The default value is the\ncurrent time.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
            readonly updatedTimestamp: {
                readonly description: "The timestamp when this message was last edited, if it ever was.  If unset,\nthe message does not show as edited.";
                readonly anyOf: readonly [{
                    readonly type: "string";
                    readonly format: "date-time";
                }, {
                    readonly type: "null";
                }];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["deleted", "deletedTimestamp", "type", "id", "url", "content", "metadata", "iconURL", "authorID", "createdTimestamp", "updatedTimestamp"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly ListMessageParameters: {
        readonly type: "object";
        readonly properties: {
            readonly sortDirection: {
                readonly description: "Return messages in ascending or descending order of creation timestamp.  'descending' is the default.";
                readonly enum: readonly ["ascending", "descending"];
                readonly type: "string";
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["sortDirection"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly CreateNotificationVariables: {
        readonly description: "https://docs.cord.com/reference/rest-api/notifications";
        readonly type: "object";
        readonly properties: {
            readonly actorID: {
                readonly description: "ID of user who is the \"actor\" sending the notification, i.e., the user\ntaking the action the notification is about.\n\nRequired if `template` includes `{{actor}}`.";
                readonly type: "string";
            };
            readonly actor_id: {
                readonly type: "string";
            };
            readonly recipientID: {
                readonly description: "ID of user receiving the notification.";
                readonly type: "string";
            };
            readonly recipient_id: {
                readonly type: "string";
            };
            readonly template: {
                readonly description: "Template for the header of the notification. The expressions `{{actor}}`\nand `{{recipient}}` will be replaced respectively with the notification's\nactor and recipient. (See below for an example.)";
                readonly type: "string";
            };
            readonly url: {
                readonly description: "URL of page to go to when the notification is clicked.";
                readonly type: "string";
            };
            readonly iconUrl: {
                readonly description: "URL of an icon image if a specific one is desired. For notifications with\nan `actor_id` this will default to the sender's profile picture, otherwise\nit will default to a bell icon.";
                readonly type: "string";
            };
            readonly type: {
                readonly description: "Currently must be set to `url`. In the future this may specify different\ntypes of notifications, but for now only `url` is defined.";
                readonly type: "string";
                readonly enum: readonly ["url"];
            };
            readonly metadata: {
                readonly description: "An arbitrary JSON object that can be used to set additional metadata on the\nnotification. When displaying a [list of\nnotifications](/components/cord-notification-list),\nyou can filter the list by metadata value.\n\nKeys are strings, and values can be strings, numbers or booleans.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["actorID", "actor_id", "recipientID", "recipient_id", "template", "url", "iconUrl", "type", "metadata"];
        readonly required: readonly ["template", "type", "url"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly NotificationVariables: {
        readonly type: "object";
        readonly properties: {
            readonly id: {
                readonly description: "The [ID](/reference/identifiers) for this notification.";
                readonly type: "string";
            };
            readonly senderUserIDs: {
                readonly description: "The [IDs](/reference/identifiers) of the user(s) who\nsent this notification. The Cord backend will sometimes aggregate multiple\nnotifications together, causing them to have multiple senders. For example,\nif multiple people react to the same message, that will generate only one\nnotification (but with multiple senders, one for each person who reacted).";
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
            };
            readonly iconUrl: {
                readonly description: "The URL of an icon image for this notification, if one was specified when\nit was created. This will always be `null` for Cord's internally-generated\nnotifications (i.e., it can only be non-null for notifications you create\nvia the REST API).";
                readonly type: readonly ["null", "string"];
            };
            readonly header: {
                readonly description: "The \"header\" or \"text\" of the notification. This will represent text like\n\"Alice replied to your thread.\" or similar. For notifications you create\nvia the REST API, this will be based upon the `template` parameter, see\nbelow.";
                readonly type: "array";
                readonly items: {
                    readonly anyOf: readonly [{
                        readonly description: "A header node representing a basic string.";
                        readonly type: "object";
                        readonly properties: {
                            readonly text: {
                                readonly description: "The text to display. This text may start and/or end with whitespace, which\nshould typically *not* be trimmed. For example, in order to display the\nnotification `\"Alice replied to your thread.\"`, this would typically be\ncomposed of two nodes -- a user node for Alice, and then a text node\ncontaining `\" replied to your thread.\"`, with a meaningful space at the\nfront, to separate this node from Alice's name.";
                                readonly type: "string";
                            };
                            readonly bold: {
                                readonly description: "Whether the text should be formatted in bold.";
                                readonly type: "boolean";
                            };
                        };
                        readonly additionalProperties: false;
                        readonly propertyOrder: readonly ["text", "bold"];
                        readonly required: readonly ["bold", "text"];
                    }, {
                        readonly description: "A header node representing a reference to a specific user.";
                        readonly type: "object";
                        readonly properties: {
                            readonly userID: {
                                readonly description: "The user referenced. This node would typically be rendered by displaying\nthis user's name.";
                                readonly type: "string";
                            };
                        };
                        readonly additionalProperties: false;
                        readonly propertyOrder: readonly ["userID"];
                        readonly required: readonly ["userID"];
                    }];
                };
            };
            readonly attachment: {
                readonly description: "Additional context attached to the notification. For example, if this\nnotification is about a new reaction on a message, the attachment will\nspecify what message received that new reaction.";
                readonly anyOf: readonly [{
                    readonly description: "An attachment representing a URL.";
                    readonly type: "object";
                    readonly properties: {
                        readonly url: {
                            readonly description: "The URL this attachment points to. This would typically be the URL to send\nthe browser to if this notification is clicked.";
                            readonly type: "string";
                        };
                    };
                    readonly additionalProperties: false;
                    readonly propertyOrder: readonly ["url"];
                    readonly required: readonly ["url"];
                }, {
                    readonly description: "An attachment representing a message.";
                    readonly type: "object";
                    readonly properties: {
                        readonly messageID: {
                            readonly description: "The ID of the message attached to this notification. For example, if this\nis a notification about being @-mentioned, this is the ID of the message\ncontaining that @-mention.";
                            readonly type: "string";
                        };
                    };
                    readonly additionalProperties: false;
                    readonly propertyOrder: readonly ["messageID"];
                    readonly required: readonly ["messageID"];
                }, {
                    readonly type: "null";
                }];
            };
            readonly readStatus: {
                readonly description: "Whether this notification has been read by the recipient yet.";
                readonly enum: readonly ["read", "unread"];
                readonly type: "string";
            };
            readonly timestamp: {
                readonly description: "The time this notification was sent.";
                readonly type: "string";
                readonly format: "date-time";
            };
            readonly metadata: {
                readonly description: "An arbitrary JSON object specified when the notification was created. This\nwill always be an empty object for Cord's internally-generated\nnotifications (i.e., it can only be non-null for notifications you create\nvia the REST API).";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["id", "senderUserIDs", "iconUrl", "header", "attachment", "readStatus", "timestamp", "metadata"];
        readonly required: readonly ["attachment", "header", "iconUrl", "id", "metadata", "readStatus", "senderUserIDs", "timestamp"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly NotificationReplyAction: {
        readonly enum: readonly ["assign-task", "attach-file", "create-thread", "mention", "unassign-task"];
        readonly type: "string";
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly UpdateUserPresenceVariables: {
        readonly type: "object";
        readonly properties: {
            readonly organizationID: {
                readonly description: "The organization that the user belongs to.";
                readonly type: "string";
            };
            readonly exclusiveWithin: {
                readonly description: "Sets an \"exclusivity region\" for the ephemeral presence set by this update.\nA user can only be present at one location for a given value of exclusiveWithin.\nIf the user becomes present at a different location with the same value of\nexclusiveWithin, they automatically become no longer present at all other\nlocations with that value of exclusive_within.\nThis is useful to more easily track presence as a user moves among sub-locations.\nFor example, suppose we'd like to track which specific paragraph on a page\na user is present. We could make those updates like this:\n\n```json\n{\n   \"organizationID\": \"<ORG_ID>\",\n   \"location\": { \"page\": \"<PAGE_ID>\", \"paragraph\": \"<PARAGRAPH_ID>\" },\n   \"exclusiveWithin\": { \"page\": \"<PAGE_ID>\" }\n}\n```\n\nAs a user moves around a page, their paragraphID will change, while their\npageID will remain the same. The above call to setPresent will mark them\npresent at their specific paragraph. However, since every update uses the\nsame exclusiveWithin, each time they are marked present at one paragraph\nthey will become no longer present at their previous paragraph.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly location: {
                readonly description: "The [location](/reference/location) you want the user to be in.";
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly durable: {
                readonly description: "When `true`, this is a [durable presence](/js-apis-and-hooks/presence-api)\nupdate, when `false`, or is not used, it is an [ephemeral presence](/js-apis-and-hooks/presence-api) update.\n\nThis value defaults to `false.`";
                readonly type: "boolean";
            };
            readonly absent: {
                readonly description: "When `true`, this is an *absence* update, meaning that the user has just left\nthis [location](/reference/location).\nIf the user is currently present at that location, it is cleared.\nThis cannot be used with a [durable presence](/js-apis-and-hooks/presence-api) update.\n\nThis value defaults to `false.` The user will be set as present at the location.";
                readonly type: "boolean";
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["organizationID", "exclusiveWithin", "location", "durable", "absent"];
        readonly required: readonly ["location", "organizationID"];
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly ThreadMessageAddedPayload: {
        readonly type: "object";
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly enum: readonly ["thread-message-added"];
            };
            readonly threadID: {
                readonly type: "string";
            };
            readonly messageID: {
                readonly type: "string";
            };
            readonly orgID: {
                readonly type: "string";
            };
            readonly organizationID: {
                readonly type: "string";
            };
            readonly applicationID: {
                readonly type: "string";
            };
            readonly author: {
                readonly $ref: "#/definitions/UserData";
            };
            readonly content: {
                readonly type: "array";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {};
                    readonly additionalProperties: true;
                };
            };
            readonly text: {
                readonly type: "string";
            };
            readonly url: {
                readonly type: "string";
            };
            readonly usersToNotify: {
                readonly type: "array";
                readonly items: {
                    readonly additionalProperties: false;
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The user's ID.  This is unique within an application.";
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly description: "The user's name.";
                            readonly type: readonly ["null", "string"];
                        };
                        readonly shortName: {
                            readonly description: "The user's short name.  In most cases, Cord components will prefer using\nthis name over `name` when set.";
                            readonly type: readonly ["null", "string"];
                        };
                        readonly profilePictureURL: {
                            readonly description: "A URL to the user's profile picture.";
                            readonly type: readonly ["null", "string"];
                        };
                        readonly metadata: {
                            readonly description: "Any metadata that has been set for the user.";
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: readonly ["string", "number", "boolean"];
                            };
                            readonly propertyOrder: readonly [];
                        };
                        readonly replyActions: {
                            readonly anyOf: readonly [{
                                readonly type: "array";
                                readonly items: {
                                    readonly $ref: "#/definitions/NotificationReplyAction";
                                };
                            }, {
                                readonly type: "null";
                            }];
                        };
                    };
                    readonly required: readonly ["id", "metadata", "name", "profilePictureURL", "replyActions", "shortName"];
                };
            };
            readonly messageType: {
                readonly enum: readonly ["action_message", "user_message"];
                readonly type: "string";
            };
            readonly metadata: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: readonly ["string", "number", "boolean"];
                };
                readonly propertyOrder: readonly [];
            };
            readonly thread: {
                readonly $ref: "#/definitions/Omit<RestApiThreadData,\"organizationID\">";
            };
        };
        readonly additionalProperties: false;
        readonly propertyOrder: readonly ["type", "threadID", "messageID", "orgID", "organizationID", "applicationID", "author", "content", "text", "url", "usersToNotify", "messageType", "metadata", "thread"];
        readonly required: readonly ["applicationID", "author", "content", "messageID", "messageType", "metadata", "orgID", "organizationID", "text", "thread", "threadID", "type", "url", "usersToNotify"];
        readonly definitions: {
            readonly UserData: {
                readonly description: "The data associated with a Cord user.";
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly description: "The user's ID.  This is unique within an application.";
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly description: "The user's name.";
                        readonly type: readonly ["null", "string"];
                    };
                    readonly shortName: {
                        readonly description: "The user's short name.  In most cases, Cord components will prefer using\nthis name over `name` when set.";
                        readonly type: readonly ["null", "string"];
                    };
                    readonly profilePictureURL: {
                        readonly description: "A URL to the user's profile picture.";
                        readonly type: readonly ["null", "string"];
                    };
                    readonly metadata: {
                        readonly description: "Any metadata that has been set for the user.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                };
                readonly additionalProperties: false;
                readonly propertyOrder: readonly ["id", "name", "shortName", "profilePictureURL", "metadata"];
                readonly required: readonly ["id", "metadata", "name", "profilePictureURL", "shortName"];
            };
            readonly NotificationReplyAction: {
                readonly enum: readonly ["assign-task", "attach-file", "create-thread", "mention", "unassign-task"];
                readonly type: "string";
            };
            readonly 'Omit<RestApiThreadData,"organizationID">': {
                readonly type: "object";
                readonly properties: {
                    readonly location: {
                        readonly description: "The [location](/reference/location) of this thread.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                    readonly id: {
                        readonly description: "The ID for this thread.";
                        readonly type: "string";
                    };
                    readonly total: {
                        readonly description: "The total number of messages in this thread.";
                        readonly type: "number";
                    };
                    readonly url: {
                        readonly description: "A URL where the thread can be seen.  This determines where a user is sent\nwhen they click on a reference to this thread, such as in a notification,\nor if they click on a reference to a message in the thread and the message\ndoesn't have its own URL.";
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly description: "The name of the thread.  This is shown to users when the thread is\nreferenced, such as in notifications.  This should generally be something\nlike the page title.";
                        readonly type: "string";
                    };
                    readonly metadata: {
                        readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                    readonly resolvedTimestamp: {
                        readonly description: "The timestamp when this thread was resolved. Set to `null` if this thread\nis not resolved.";
                        readonly anyOf: readonly [{
                            readonly type: "string";
                            readonly format: "date-time";
                        }, {
                            readonly type: "null";
                        }];
                    };
                    readonly resolved: {
                        readonly description: "Whether this thread is resolved. In a GET request, this is equivalent to\n`!!resolvedTimestamp`. In a PUT request, setting this to `true` is\nequivalent to setting `resolvedTimestamp` to the current time, and setting\nthis to `false` is equivalent to setting `resolvedTimestamp` to `null`.";
                        readonly type: "boolean";
                    };
                    readonly participants: {
                        readonly description: "All of the users who are subscribed to this thread.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly lastSeenTimestamp: {
                                    readonly description: "The timestamp of the most recent message or reaction that this user has\nseen in this thread. Is `null` if this participant has never viewed this\nthread.";
                                    readonly anyOf: readonly [{
                                        readonly type: "string";
                                        readonly format: "date-time";
                                    }, {
                                        readonly type: "null";
                                    }];
                                };
                                readonly userID: {
                                    readonly description: "The user ID of the participant. Can be null if the current viewer no longer\nshares an [organization](/reference/rest-api/organizations) with this\nparticipant (and therefore can no longer access that participant's\ninformation).";
                                    readonly type: readonly ["null", "string"];
                                };
                            };
                            readonly additionalProperties: false;
                            readonly propertyOrder: readonly ["lastSeenTimestamp", "userID"];
                            readonly required: readonly ["lastSeenTimestamp", "userID"];
                        };
                    };
                    readonly typing: {
                        readonly description: "The users that are currently typing in this thread.  Typing status is\ntransient in nature, so the value is the set of users typing at a\nparticular instant, but may change rapidly.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
                readonly additionalProperties: false;
                readonly propertyOrder: readonly ["location", "id", "total", "url", "name", "metadata", "resolvedTimestamp", "resolved", "participants", "typing"];
                readonly required: readonly ["id", "location", "metadata", "name", "participants", "resolved", "resolvedTimestamp", "total", "typing", "url"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
    readonly ClientAuthTokenData: {
        readonly description: "https://docs.cord.com/reference/authentication/";
        readonly additionalProperties: true;
        readonly type: "object";
        readonly properties: {
            readonly app_id: {
                readonly description: "Your app ID";
                readonly format: "uuid";
                readonly type: "string";
            };
            readonly user_id: {
                readonly $ref: "#/definitions/ID";
                readonly description: "The ID for the user";
            };
            readonly organization_id: {
                readonly $ref: "#/definitions/ID";
                readonly description: "The ID for the user’s organization";
            };
            readonly user_details: {
                readonly description: "If present, update’s the user’s details, or creates a user with those\ndetails if the user_id is new to Cord. This is an object that contains the\nsame fields as the [user management REST\nendpoint](/reference/rest-api/users/)";
                readonly $ref: "#/definitions/PlatformUserVariables";
            };
            readonly organization_details: {
                readonly description: "If present, update’s the organization’s details, or creates an organization\nwith those details if the organization_id is new to Cord. This is an object\nthat contains the same fields as the [organization management REST\nendpoint](/reference/rest-api/organizations/)";
                readonly $ref: "#/definitions/PlatformOrganizationVariables";
            };
        };
        readonly propertyOrder: readonly ["app_id", "user_id", "organization_id", "user_details", "organization_details"];
        readonly required: readonly ["app_id", "organization_id", "user_id"];
        readonly definitions: {
            readonly ID: {
                readonly minLength: 1;
                readonly maxLength: 128;
                readonly type: readonly ["string", "number"];
            };
            readonly PlatformUserVariables: {
                readonly type: "object";
                readonly properties: {
                    readonly email: {
                        readonly description: "Email address";
                        readonly format: "email";
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly description: "Full user name";
                        readonly type: "string";
                    };
                    readonly shortName: {
                        readonly description: "Short user name. In most cases, this will be preferred over name when set.";
                        readonly type: "string";
                    };
                    readonly short_name: {
                        readonly type: "string";
                    };
                    readonly status: {
                        readonly enum: readonly ["active", "deleted"];
                        readonly type: "string";
                    };
                    readonly profilePictureURL: {
                        readonly description: "This must be a valid URL, which means it needs to follow the usual URL\nformatting and encoding rules. For example, any space character will need\nto be encoded as `%20`. We recommend using your programming language's\nstandard URL encoding function, such as `encodeURI` in Javascript.";
                        readonly format: "uri";
                        readonly type: readonly ["null", "string"];
                    };
                    readonly profile_picture_url: {
                        readonly format: "uri";
                        readonly type: readonly ["null", "string"];
                    };
                    readonly first_name: {
                        readonly description: "User's first name. This field is deprecated and has no effect.";
                        readonly type: "string";
                    };
                    readonly last_name: {
                        readonly description: "User's last name. This field is deprecated and has no effect.";
                        readonly type: "string";
                    };
                    readonly metadata: {
                        readonly description: "Arbitrary key-value pairs that can be used to store additional information.";
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: readonly ["string", "number", "boolean"];
                        };
                        readonly propertyOrder: readonly [];
                    };
                };
                readonly additionalProperties: false;
                readonly propertyOrder: readonly ["email", "name", "shortName", "short_name", "status", "profilePictureURL", "profile_picture_url", "first_name", "last_name", "metadata"];
                readonly required: readonly ["email"];
            };
            readonly PlatformOrganizationVariables: {
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly description: "Organization name";
                        readonly type: "string";
                    };
                    readonly status: {
                        readonly enum: readonly ["active", "deleted"];
                        readonly type: "string";
                    };
                    readonly members: {
                        readonly description: "List of partner-specific IDs of the users who are members of this organization";
                        readonly type: "array";
                        readonly items: {
                            readonly type: readonly ["string", "number"];
                        };
                    };
                };
                readonly additionalProperties: false;
                readonly propertyOrder: readonly ["name", "status", "members"];
                readonly required: readonly ["name"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-07/schema#";
    };
};
export default _default;
