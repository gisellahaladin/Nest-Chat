'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jwt = require('jsonwebtoken');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var jwt__namespace = /*#__PURE__*/_interopNamespace(jwt);

function getClientAuthToken(app_id, app_secret, payload) {
    if (!payload || !payload.user_id || !payload.organization_id) {
        // You can't get here in TS -- it's a TS type error -- but not everyone uses
        // TS.
        throw new Error('Missing user_id or organization_id. ' +
            'A token without a user_id and organization_id is an administrative server auth token ' +
            '(which should never be given to clients). ' +
            'If you intended to generate a server auth token, call getServerAuthToken instead.');
    }
    return jwt__namespace.sign({ ...payload, app_id }, app_secret, {
        algorithm: 'HS512',
        expiresIn: '1 min',
    });
}
function getServerAuthToken(app_id, app_secret) {
    return jwt__namespace.sign({ app_id }, app_secret, {
        algorithm: 'HS512',
        expiresIn: '1 min',
    });
}
function getApplicationManagementAuthToken(customer_id, customer_secret) {
    return jwt__namespace.sign({ customer_id }, customer_secret, {
        algorithm: 'HS512',
        expiresIn: '1 min',
    });
}

exports.getApplicationManagementAuthToken = getApplicationManagementAuthToken;
exports.getClientAuthToken = getClientAuthToken;
exports.getServerAuthToken = getServerAuthToken;
//# sourceMappingURL=index.js.map
